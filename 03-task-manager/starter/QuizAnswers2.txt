In this lesson, you created a middleware function called asyncWrapper. Why?

    We use asyncWrappers for all our controllers, because we have asynchronous 
    operations. Better solution for Task Manager app, create middleware function, 
    that essentially will wrap our controllers set up the functionality, where we 
    don't have to repeat ourselves, what ensuring the reliability of the application.

Suppose that you want to make sure that both a status code and and error message are 
send back to the user when they request the URL for a task that does not exist. 
Assume that youâ€™ve created a CustomAPIError class and an error handler that references 
that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
     const error = new CustomAPIError(`No task with id : ${taskID}`, 404);
     return next(error);
  }
  res.status(200).json({ task });
});